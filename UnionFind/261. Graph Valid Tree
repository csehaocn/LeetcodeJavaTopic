public class Solution {
    
    // 写出来bug还是很多的, 特别是union find要不要初始化每个元素的问题
    // 这里看来, 因为总的node数量总是可知的
    // 所以一开始就初始化为自己在大部分情况下都是成立的.
    
    class UnionFind{
        
        int[] id;
        int[] w;
        
        public UnionFind(int size){
            this.id = new int[size];
            this.w = new int[size];
            for(int i = 0; i < size; ++i){
                id[i] = -1;
            }
        }
        
        public void init(int i){
            if(-1 == id[i])
                id[i] = i;
            return;
        }
        
        public int find(int i){
            // Error: remember sometimes you will call non init values...
            if(-1 == id[i])
                return -1;
            if(id[i] != i)
                id[i] = find(id[i]);
            return id[i];
        }
        
        public void union(int i, int j){
            
            int fi = find(i);
            int fj = find(j);
            
            if(fi != fj){
                
                int wi = w[fi];
                int wj = w[fj];
                if(wi == wj){
                    // Error: used wi, wj instead of fi, fj in following statements
                    id[fi] = fj;
                    w[fj] += 1;
                }else if(fi < fj){
                    id[fi] = fj;
                }else{
                    id[fj] = fi;
                }
                
            }
            
            return;
            
        }
        
    }
    
    public boolean validTree(int n, int[][] edges) {
        if(null == edges)
            return false;
        
        int ne = edges.length;
        if(0 == ne)
            return n == 0 || n == 1;
        
        
        UnionFind uf = new UnionFind(n);
        
        for(int[] e : edges){
            // check len == 2
            int a = e[0];
            int b = e[1];
            uf.init(a);
            uf.init(b);

            if(uf.find(a) == uf.find(b))
                return false;
            else{
                uf.union(a, b);
            }
        }
        
        // Error : forgot the disconnected case.
        Integer root = null;
        for(int i = 0; i < n; ++i){
            System.out.println(i);
            int f = uf.find(i);
            if(-1 != f){
                if(null == root){
                    root = f;
                }else{
                    if(root != f)
                        return false;
                }
            }else{
                // Error: 我的天, 边的数目不足也是错的。。。
                return false;
            }
        }
        
        
        return true;
        
    }
}
