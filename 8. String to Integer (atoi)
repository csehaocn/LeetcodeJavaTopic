public class Solution {
    
    /*
    在一开始就考虑所有的cornor case
    而且要分情况考虑, 每个情况总结一种
    考虑cases的coverage
    
    写简洁的代码并不重要
    
    1.  discards all leading whitespaces
    2. sign of the number
    3. overflow
    4. invalid input
    
    */
    
    
    // 嗯, 不管怎样 还是难以考虑全面
    // 1.   + -号的问题...
    // 2.   Overflow考虑到了, 但是忘记写上去了.
    // 3.   因为中途才加上正负号的问题, 中间有些有return的代码没有修改, 想想定义全局常量的重要性
    //      应该使用break 而不是 return;
    public int myAtoi(String str) {
        if(null == str)
            return 0;
        int len = str.length();
        if(0 == len)
            return 0;
        
        int i = 0;
        int j = len-1;
        while(i < len && str.charAt(i) == ' ')
            i++;
        while(j >= 0 && str.charAt(j) == ' ')
            j--;
        if(i > j)
            return 0;
            
        int res = 0;
        Boolean pos = null;
        for(int k = i; k <= j; ++k){
            char c = str.charAt(k);
            if(!Character.isDigit(c)){
                if(c == '+' && null == pos){
                    pos = true;
                }else if( c == '-' && null == pos){
                    pos = false;
                }else
                    break;
                    //return res;
            }else{
                if(Integer.MAX_VALUE / 10 >= res)
                    res *= 10;
                else
                    return pos == null || true == pos ? Integer.MAX_VALUE : Integer.MIN_VALUE;
                if(Integer.MAX_VALUE - (c - '0') >= res)
                    res += c - '0';
                else if(null != pos && !pos && c - '0' == 8)
                    return Integer.MIN_VALUE;
                else    
                    return pos == null || true == pos ? Integer.MAX_VALUE : Integer.MIN_VALUE;
            }
        }
        if(null == pos || true == pos)
            return res;
        else
            return -res;
    }
}



// 较好的解法

/*



*/
