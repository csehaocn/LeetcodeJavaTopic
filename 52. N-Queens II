public class Solution {

    // occupied row
    int[] or;
    // occupied col
    int[] oc;
    // occupied diag;
    int[] od;
    // occupied reversed diag;
    int[] ord;
    
    public int totalNQueens(int n) {

        if(n <= 0)
            return 0;
        
        or = new int[n];
        oc = new int[n];
        od = new int[2*n - 1];
        ord = new int[2*n - 1];
        
        return DFS(n, 0);
    }
    
    private boolean occupied(int n, int r, int c){
        if(0 == or[r] && 0 == oc[c] && 0 == od[n-1-r+c] && 0 == ord[r+c])
            return false;
        else
            return true;
    }
    
    private void occupy(int n, int r, int c, int value){
        or[r] = value;
        oc[c] = value;
        od[n-1-r+c]=value;
        ord[r+c]=value;
        return;
    }
    
    private int DFS(int n, int col){
        if(col >= n){
            return 1;
        }
        
        int res = 0; 
        for(int i = 0; i < n; ++i){
            if(!occupied(n, i, col)){
                occupy(n, i, col, 1);
                res += DFS(n, col+1);
                occupy(n, i, col, 0);
            }
        }
        return res;
    }
}
