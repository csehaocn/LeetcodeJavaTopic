public class Solution {
    public int wordsTyping(String[] sentence, int rows, int cols) {
        if(null == sentence)
            return 0;
        
        if(rows < 1 && cols < 1){
            return 0;
        }
        
        // Error: 为了方便结尾的边界条件,  我的方法里面 在字符串超出col的时候并不做处理, 而是在新的一个string到来时在处理
        // 这样就导致了,  dp的数组需要存储两个超出末尾的情况.
        int[] dpEnd = new int[cols + 2];
        int[] dpLines = new int[cols + 2];
        
        
        for(int i = 0; i < cols + 2; ++i){
            
            int line = 0;
            int c = i;
            
            for(String s : sentence){
                
                c += s.length();
                if(c > cols){
                    c = 0;
                    line++;
                    if(s.length() > cols){
                        return 0;
                    }else{
                        c += s.length();
                    }
                }
                // One word ends.
                c++;
            }
            
            dpEnd[i] = c;
            dpLines[i] = line;
            
        }
    
    // line 1
    // line 2
    // line 3
    int times = 0;
    int c = 0;
    
    int cycleTimes = 0;
    int cycleLines = 0;
    // 最开始用了一个特例就结束了, 没想到过rows的定义会产生分歧
    // 看来代码里面, 还是对变量的功能, 循环不变时做一个明确的定义比较好 
    // 这里rows定义为,  还没有被使用过的空白line的数量
    rows--;
    // 在第一次进行操作前, 要做一次--, 使用第一行
    
    while(rows >= 0 ){
        times++;
        rows -= dpLines[c];
         //
        cycleTimes++;
        cycleLines += dpLines[c];
        c = dpEnd[c];
        
        if(rows >= 0 && c + sentence[0].length() > cols){
            // 这段代码和外面的代码里面, 对rows的定义完全不同, 导致了悲剧.
            cycleLines++;
            times += rows / cycleLines * cycleTimes;
            rows = rows % cycleLines;
            // Error: the return condition is different, if there is no more lines, no exceeded exsits
            // rows == 0
            // 恩, 这里c还是停留在cycle的末尾比较好
            // 放在新的头部, 还是无法对越出判断做统一
        }
        
    }
    times--;
    return times;
    }
}
