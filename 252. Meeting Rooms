/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    
    // 这种很简单的题, 但是不认真做, 还是会失误
    // 在加interval的时候只考虑了头重叠, 而不考虑尾重叠是怎么回事...
    
    // 下面有有趣的方法, 在comparator内部加入throw exception, 并在array排序的时候就throw.
    // 不过这里有个问题, n个元素之间的比较总共有n^2, 而nlog(n)的排序, 最多只比较nlog(n)次,
    // 那么这个代码能保证错误的relation一定能被call到吗
    
    public boolean canAttendMeetings(Interval[] intervals) {
        if(null == intervals)
            return false;
        int len = intervals.length;
        if(0 == len)
            return true;
        
        TreeSet<Interval> ts = new TreeSet<>(new Comparator<Interval>(){
            
            public int compare(Interval l, Interval r){
                return l.start - r.start;
            }
            
        });
        
        for(Interval i : intervals){
            
            Interval f = ts.floor(i);
            if(null != f && f.end > i.start)
                return false;
            Interval c = ts.ceiling(i);
            if(null != c && c.start < i.end)
                return false;
            ts.add(i);
        }
        return true;
    }
}

private boolean canAttendMeetings(Interval[] intervals) {
	try {
		Arrays.sort(intervals, new IntervalComparator());
	} catch (Exception e) {
		return false;
	}
	return true;
}

private class IntervalComparator implements Comparator<Interval> {
	@Override
	public int compare(Interval o1, Interval o2) {
		if (o1.start < o2.start && o1.end <= o2.start)
			return -1;
		else if (o1.start > o2.start && o1.start >= o2.end)
			return 1;
		throw new RuntimeException();
	}
}
