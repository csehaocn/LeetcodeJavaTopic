public class Solution {
    
    // 用UnionFind做了一个, 但是确非常的慢.
    class UnionFind{
        
        int id[];
        int weight[];
        
        public UnionFind(int size){
            id = new int[size];
            weight = new int[size];
        }
        
        public void init(int idx){
            id[idx] = idx;
            weight[idx] = 1;
            return;
        }
        
        public int find(int idx){
            if(idx != id[idx])
                id[idx] = find(id[idx]);
            return id[idx];
        }
        
        public void union(int i, int j){
            
            int idi = find(i);
            int idj = find(j);
            
            if(idi != idj){
                
                if(weight[idi] == weight[idj]){
                    id[idi] = idj;
                    weight[idj] = weight[idj] + 1;
                }else if(weight[idi] > weight[idj]){
                    id[idj] = idi;
                }else{
                    id[idj] = idi;
                }
                
            }
            
            return;
            
        }

    }
    
    int m;
    int n;
    
    public void solve(char[][] board) {
        if(null == board)
            return;
        m = board.length;
        if(0 == m)  
            return;
        n = board[0].length;
        if(0 == n)
            return;
        
        // check overflow
        int size = m*n;
        UnionFind uf = new UnionFind(size + 1);
        uf.init(size);
        
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                if(board[i][j] == 'O'){
                    int idx = twoOne(i, j);
                    uf.init(idx);
                    if(0 == i || 0 == j || m-1 == i || n-1 == j){
                        uf.union(idx, size);
                    }
                    // Error: else if...
                    // 在右边和下边的边界上, 也是需要Union的.
                    
                    if(i > 0 && board[i-1][j] == 'O'){
                        uf.union(idx, twoOne(i-1, j));
                    }
                    if(j > 0 && board[i][j-1] == 'O'){
                        uf.union(idx, twoOne(i, j-1));
                    }

                }
            }
        }
        
        for(int i = 0; i < m; ++i)
            for(int j = 0; j < n; ++j){
                if(board[i][j] == 'O'){
                    if( uf.find(twoOne(i, j)) != uf.find(size) ){
                        board[i][j] = 'X';
                    }
                }
        }
        
        return;
    }
    
    private int twoOne(int i, int j){
        return i*n + j;
    }
}
