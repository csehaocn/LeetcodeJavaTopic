/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    
    // 很简单的recursive
    // 其他的也没啥新花样, 无非level traversal
    private int depthSumUtil(List<NestedInteger> nestedList, int baseHeight){
        int res = 0;
        for(NestedInteger ni : nestedList){
            if(ni.isInteger())
                res += baseHeight*ni.getInteger();
            else
                res += depthSumUtil(ni.getList(), baseHeight+1);
        }
        return res;
    }
    
    public int depthSum(List<NestedInteger> nestedList) {
        if(null == nestedList)
            return 0;
        else
            return depthSumUtil(nestedList, 1);
    }
}
