/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSumInverse(List<NestedInteger> nestedList) {
        // 可以用DFS, recursive, 返回下层的和以及深度
        // 可以用BFS, 记录一个带权前层和以及不带权前层和
        
        // 这里用BFS
        
        // 其他的一些做法
        // 包括
        // 1. 把每层之前的unweighted sum 传入下层, 然后返回最终值, 实质是BFS
        // 2. 用level array记录每一层的sum, 然后post processing
        // 3. 2 pass, 先获得整个树的高度, 作为变量解答.
        // 4. 计算反向weight, 最大height, 然后用最大(height+1)*unweighted - 反向weight 
        Queue<NestedInteger> q = new LinkedList<>();
        q.addAll(nestedList);
        int res = 0;
        int uwRes = 0;
        while(!q.isEmpty()){
            
            int size = q.size();
            for(int i = 0; i < size; ++i){
                
                NestedInteger n = q.poll();
                if(n.isInteger()){
                    uwRes += n.getInteger();
                }else{
                    q.addAll(n.getList());
                }
                
            }
            
            res += uwRes;
        }
        
        return res;
    }
}
