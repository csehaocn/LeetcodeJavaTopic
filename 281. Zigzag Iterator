public class ZigzagIterator {

    // 总结, 在iterator或者类似的题目中, 初始化往往只需要call一次next就可以完成了
    // 大部分情况下, code都可以统一, 忽略第一次next的return值
    // 
    // 其实就这样一个小小的题目, 就能总结出这样多的问题
    // 要认真写好代码, 其实要提高的地方还是有很多的
    
    // 那么在写一个k lists的版本, 其实这个版本更加容易, 用一个queue来维护所有的list
    
    
    /*
    
    Integer next;
    Iterator<Integer> it1;
    Iterator<Integer> it2;
    boolean one;

    public ZigzagIterator(List<Integer> v1, List<Integer> v2) {
        
        if(null != v1){
            it1 = v1.iterator();
        }else{
            it1 = null;
            // it1 = new ArrayList<>(0).iterator();
        }
        
        if(null != v2){
            it2 = v2.iterator();
        }else{
            it2 = null;
        }
        
        one = true;
        
        // Here we have exactly the same code as next()
        // In many iterators, simply call next() once at start and ignore the return would do the initialization.
        // 嗯，另外一个要注意的点是, 
        // 在初始化call next() 之前, 最好给next变量一个零时值, 如果不给, 那么我们就很有可能需要在 next()的返回值中做判断条件
        // 不然会返回null值而无法被int接受
        // 而给next()返回值做判断条件, 又违背了iterator的throw exception或者返回null的规范
        // 所以, 最好的做法是, 在用函数初始化构造函数时, 先对自身变量付一个最后会被丢弃的值
        // none null init, discarded later
        next = 0;
        
        next();
        
        // Error: [], [1]
        // OK, 这个代码有错, 因为在这个版本的next函数中, 我们假定, 进入函数是, one变量总是停在一个valid的list上,
        // 然而初始化之前, 并不能保留这一点
        // 因此要在构造函数中调用next()函数, next()函数必须不能做任何假定.
        // 这样看来, 在init中调用next()是比较tricky的做法, 必须在next()符合初始化规范, 以及初始化符合next()规范的情况下, 才能调用
        
        return;
    }
    
    private Integer getOne(){
        if(null != it1 && it1.hasNext())
            return it1.next();
        else
            return null;
    }
    
    private Integer getTwo(){
        if(null != it2 && it2.hasNext())
            return it2.next();
        else
            return null;
    }
    
    public int next(){
        Integer ret = next;
        
        if(one){
            next = getOne();
            if(null == next)
                next = getTwo();
            one = false;
        }else{
            next = getTwo();
            if(null == next)
                next = getOne();
            one = true;
        }
        
        
        //  Error Code
        if(one && (null == it1 || !it1.hasNext()) || !one && (null == it2 || !it2.hasNext()) ){
            one = !one;
            // Error: 这段代码同样是错的, 引起了stack overflow
            // 如果你想这样调用, 那么必须定义两种不同的next()函数...
            next();
        }else{
            if(one && null != it1 && it1.hasNext()){
                next = it1.next();
            }else if( !one && null != it2 && it2.hasNext()){
                next = it2.next();
            }else{
                next = null;
            }
            one = !one;
        }
        
        
        return ret;
    }
    
    */

    /*
    
    
    public int next() {
        Integer ret = next;
        
        if(one && null != it1 && it1.hasNext()){
            next = it1.next();
            if(null != it2 && it2.hasNext())
                one = !one;
        }else if(!one && null != it2 && it2.hasNext()){
            next = it2.next();
            if(null != it1 && it1.hasNext())
                one = !one;
        }else{
            next = null;
        }
        
        // 注意这里throw exception, 才能完全符合next()的API规范
        if(null == ret){
            // throw exception here
            return 0;
        }
        
        return ret;
        
        // Error: Null poiter exception
        // 注意返回值是int而不是Integer, 这可能还是第一次遇到返回Integer不能被int作用的情况
        //return ret == null ? 0 : ret;
        
    }
    */

    public boolean hasNext() {
        return null != next;
    }
    
}

import java.util.*;
/**
 * Created by csehao on 1/13/2017.
 */
public class ZigZagIterator {

    Queue<Iterator<Integer>> q;
    Integer kNext;

    public ZigZagIterator(List<List<Integer>> kLists) {

        if(null == kLists)
            return;

        q = new LinkedList<>();
        kNext = null;

        for(List<Integer> l : kLists){
            if(null != l && !l.isEmpty()){
                q.offer(l.iterator());
            }
        }

        kNext = 0;
        next();

        return;

    }

    public int next(){

        if(null == kNext){
            // throw exception
            ;
        }

        Integer ret = kNext;

        if(q.isEmpty()){
            kNext = null;
        }else{
            Iterator<Integer> it = q.poll();
            kNext = it.next();
            if(it.hasNext())
                q.offer(it);
        }

        return ret;
    }

    public boolean hasNext(){
        return null != kNext;
    }

    public static void main(String[] args) {
        List<List<Integer>> l = new ArrayList<>();

        l.add(Arrays.asList());
        l.add(Arrays.asList(1,3,5));
        l.add(Arrays.asList(2,4,6));
        l.add(Arrays.asList());
        l.add(Arrays.asList(3,6,9));
        l.add(Arrays.asList(1,1,1,1));

        ZigZagIterator z = new ZigZagIterator(l);

        List<Integer> res = new ArrayList<>();
        while(z.hasNext()){
            res.add(z.next());
        }

        System.out.println(res);

        return;
    }

}

/**
 * Your ZigzagIterator object will be instantiated and called as such:
 * ZigzagIterator i = new ZigzagIterator(v1, v2);
 * while (i.hasNext()) v[f()] = i.next();
 */
