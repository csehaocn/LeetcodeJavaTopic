public class Solution {
    
    // occupied row
    int[] or;
    // occupied col
    int[] oc;
    // occupied diag;
    int[] od;
    // occupied reversed diag;
    int[] ord;
    
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        if(n <= 0)
            return res;
        
        or = new int[n];
        oc = new int[n];
        od = new int[2*n - 1];
        ord = new int[2*n - 1];
        
        char[][] board = new char[n][n];
        for(int i = 0; i < n; ++i){
            for(int j = 0; j < n; ++j){
                board[i][j] = '.';
            }
        }
        
        DFS(board, n, 0, res);
        
        return res;
    }
    
    private boolean occupied(int n, int r, int c){
        if(0 == or[r] && 0 == oc[c] && 0 == od[n-1-r+c] && 0 == ord[r+c])
            return false;
        else
            return true;
    }
    
    private void occupy(int n, int r, int c, int value){
        or[r] = value;
        oc[c] = value;
        od[n-1-r+c]=value;
        ord[r+c]=value;
        return;
    }
    
    private void DFS(char[][] board, int n, int col, List<List<String>> res){
        if(col >= n){
            
            List<String> s = new ArrayList<>();
            for(char[] ca : board){
                s.add(new String(ca));
            }
            
            res.add(s);
            return;
        }
        
        for(int i = 0; i < n; ++i){
            if(!occupied(n, i, col)){
                board[i][col] = 'Q';
                occupy(n, i, col, 1);
                DFS(board, n, col+1, res);
                occupy(n, i, col, 0);
                board[i][col] = '.';
            }
        }
        return;
    }
    
}
