public class Solution {
    // 这个题目很难想到是用贪心
    // 因为贪心总是排序后从两头开始处理
    // 贪心处理总是容易想到
    // 左边到头部和右边的尾部这两个路在外面的点
    // 但是对于射气球这样点问题来说
    // 因为我只需要cover一个range的一个点, 而不是全部range
    // 所以问题点关键变成了, 最左边的尾节点和最右边点头节点
    public int findMinArrowShots(int[][] points) {
        if(null == points){
            return 0;
        }
        
        int len = points.length;
        if(0 == len)
            return 0;
        
        Arrays.sort(points, new Comparator<int[]>(){
            public int compare(int[] l, int[] r){
                return l[0] - r[0];
            }
        });
        
        int i = len-2;
        int j = points[len-1][0];
        int res = 1;
        while(i >= 0){
            while( i >= 0 && points[i][1] >= j){
                i--;
            }
            if(i >= 0){
                res++;
                j = points[i][0];
            }
        }
        return res;
    }
}
