public class Solution {
// 看discussion以后, 这个题目其实就是找一个unique feature来决定判断条件的问题
// 对于所有的情况, 我们都可以通过左边和上面来判断是不是头部.

// 这个题目当然可以采用周围判断, 但是用一个累加器来总结四面的情况, 还真可以概括, 是不是边界的情况
// 这种头部边界特征, 其实不容易想到, 不容易想到的其实是四周的条件判断, 其实还真是挺大一堆 容易出错的..., 因为不能越界的关系, 要不停的判断边界.....
    public int countBattleships(char[][] board) {
        // Count unique feature of each battle ship
        // left head for horizontal ones
        // up head for vertical ones
        int count = 0;
        if(null == board)
            return 0;
        int m = board.length;
        if(0 == m)
            return 0;
        int n = board[0].length;
        if(0 == n)
            return 0;
        
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                
                if('X' == board[i][j]){
                    int around = 0;
                    if(i > 0){
                        around += board[i-1][j] == '.' ? 0 : 1;
                    }
                    if(i < m-1){
                        around += board[i+1][j] == '.' ? 0 : 1;
                    }
                    if(j > 0){
                        around += board[i][j-1] == '.' ? 0 : 1;
                    }
                    if(j < n-1){
                        around += board[i][j+1] == '.' ? 0 : 1;
                    }
                    if(around == 0){
                        count += 2;
                    }else if(around == 1){
                        count += 1;
                    }
                }
                
            }
        }
        return count / 2;
    }
}


public class Solution {
    public int countBattleships(char[][] board) {
        if(null == board)
            return 0;
        
        int m = board.length;
        if(0 == m)
            return 0;
        int n = board[0].length;
        if(0 == n)
            return 0;
        
        int res = 0;
        
        for(int i = 0; i < m; ++i){
            for(int j = 0; j < n; ++j){
                
                if('X' == board[i][j]){
                    if( (i == 0 || '.' == board[i-1][j]) && (j == 0 || '.' == board[i][j-1]) )
                        res++;
                }
            }
        }
        
        return res;
    }
}
