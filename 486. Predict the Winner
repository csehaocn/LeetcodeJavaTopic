public class Solution {
    
    // 嗯 现在知道了每一个DFS都可以做DP
    // 那么这一块应该不会在出什么问题了.
    public boolean PredictTheWinner(int[] nums) {
        if(null == nums)
            return false;
            
        int len = nums.length;
        if(0 == len)
            return false;
            
        int dp[][] = new int[len][len];
        for(int i = 0; i < len; ++i){
            for(int j = 0; j < len; ++j){
                dp[i][j] = -1;
            }
        }
        
        return DFSDP(nums, dp, 0, len-1) >= 0;
    }
    
    private int DFSDP(int[] nums, int[][] dp, int i, int j){
        
        if(i == j){
            return nums[i];
        }
        
        if(-1 == dp[i][j]){
            // other person can win 
            int l = DFSDP(nums, dp, i+1, j);
            int r = DFSDP(nums, dp, i, j-1);
            dp[i][j] = -1 * Math.min(l - nums[i], r - nums[j]);
        }
        
        return dp[i][j];
    }
    
}
