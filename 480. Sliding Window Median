public class Solution {
    
    public double[] medianSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int m = n - k + 1; // 结果的尺寸
        double[] res = new double[m];
        //两个堆，一个最大堆，一个最小
        PriorityQueue<Integer> maxHeap = new PriorityQueue<Integer>(k, Collections.reverseOrder());
        PriorityQueue<Integer> minHeap = new PriorityQueue<Integer>(k);
        for ( int i=0; i<n; i++){
            int num = nums[i];
            // 让maxHeap始终保存小于一半的值，minHeap保存大于一半的，正好两半
            if( maxHeap.size() == 0 || maxHeap.peek() >= num)
                maxHeap.add(num);
            else minHeap.add(num);
            // 维护两个堆，保证两个堆得大小，要么保持一致（偶数时），要么maxHeap多一个（奇数时）
            if( minHeap.size() > maxHeap.size() )
                maxHeap.add(minHeap.poll());
            if( maxHeap.size() > minHeap.size() + 1 )
                minHeap.add(maxHeap.poll());
            // 如果需要输出
            if ( i-k+1 >=0 ){
                if( k % 2 == 1 )
                    res[i- k + 1] = maxHeap.peek();
                else 
                    res[i- k + 1] = (maxHeap.peek()/2.0 + minHeap.peek()/2.0); // 小心溢出
                //移除并更新
                int toBeRemove = nums[i - k + 1];
                if( toBeRemove <= maxHeap.peek())
                    maxHeap.remove(toBeRemove);
                else minHeap.remove(toBeRemove);
                // 维护两个堆，保证两个堆得大小，要么保持一致（偶数时），要么maxHeap多一个（奇数时）
                if( minHeap.size() > maxHeap.size() )
                    maxHeap.add(minHeap.poll());
                if( maxHeap.size() > minHeap.size() + 1 )
                    minHeap.add(maxHeap.poll());

            }
        }
        return res;

    }
    /*
    
    public double[] medianSlidingWindow(int[] nums, int k) {
        
        int pqSize = k/2;
        if(null == nums)
            return null;
            
        int len = nums.length;    
        // Error: len - k ...
        double[] d = new double[len - k + 1];
        
        
        if(len == 1){
            d[0] = nums[0];
            return d;
        }
        if(len == 2 && k == 1){
            d[0] = nums[0];
            d[1] = nums[1];
            return d;
        }
        if(len == 2){
            d[0] = (nums[0] + nums[1]) / 2;
            return d;
        }
        if(len <= k){
            return null;
        }
        
        // Error: 用TreeSet本根不work
        // 重复的数字都被删除掉了....
        // 可以用PriorityQueue, 也可以用TreeSet以及
        TreeSet<Integer> l = new TreeSet<>();
        TreeSet<Integer> r = new TreeSet<>();
        
        if(nums[0] < nums[1]){
            l.add(nums[0]);
            r.add(nums[1]);
        }else{
            l.add(nums[1]);
            r.add(nums[0]);
        }

        
        for(int i = 2; i < len; ++i){
            int n = nums[i];
            int ml = l.last();
            int mr = r.first();
            if(n < ml)
                l.add(n);
            else
                r.add(n);
            if(i >= k){
                int ln = nums[i-k];
                if(l.contains(ln)){
                    l.remove(ln);
                }else{
                    r.remove(ln);
                }
            }
            while(l.size() > r.size()){
                r.add(l.pollLast());
            }
            while(l.size() < r.size() - 1){
                l.add(r.pollFirst());
            }
            
            // Error: i >= k
            if(i >= k-1)
                d[i-k+1] = k%2 == 1 ? r.first() : (l.last() + r.first())/2;
        }
        return d;
    }
    */
}
